{"version":3,"file":"static/js/31.6fd40e0b.chunk.js","mappings":"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","sources":["Utils/calculateSleepHours.js","Utils/calculateIntervalSleeptHours.js","Utils/getRegistrationsForAWeek.js","webpack://health-monitor/./src/pages/SleepPage/SleepPage.module.css?0cd1","pages/SleepPage/index.js","pages/SleepPage/SleepPage.jsx","Utils/formatDate.js","webpack://health-monitor/./src/components/WeeklyChart/WeeklyChart.module.css?6b49","components/WeeklyChart/index.js","components/WeeklyChart/WeeklyChart.jsx"],"sourcesContent":["export default function calculateSleepHours(age, activityLevel = \"moderate\") {\r\n  let sleepRange;\r\n\r\n  if (age < 14) {\r\n    sleepRange = [9, 11];\r\n  } else if (age <= 17) {\r\n    sleepRange = [8, 10];\r\n  } else if (age <= 64) {\r\n    sleepRange = [7, 9];\r\n  } else {\r\n    sleepRange = [7, 8];\r\n  }\r\n\r\n  if (activityLevel === \"high\") {\r\n    sleepRange = [sleepRange[0] + 0.5, sleepRange[1] + 1];\r\n  }\r\n\r\n  const min = sleepRange[0];\r\n  const max = sleepRange[1];\r\n\r\n  const medium = (max + min) / 2;\r\n\r\n  return medium;\r\n}\r\n","export default function calculateIntervalSleeptHours(\r\n  fromHour,\r\n  fromMinute,\r\n  fromAmPm,\r\n  toHour,\r\n  toMinute,\r\n  toAmPm\r\n) {\r\n  // normalize input (string -> number, trim)\r\n  const fH = Number(String(fromHour).trim());\r\n  //   console.log(\"fH :\", fH);\r\n\r\n  const fM = Number(String(fromMinute).trim());\r\n  const tH = Number(String(toHour).trim());\r\n  const tM = Number(String(toMinute).trim());\r\n  const fAP = String(fromAmPm || \"\")\r\n    .trim()\r\n    .toUpperCase();\r\n  //   console.log(\"fAP :\", fAP);\r\n\r\n  const tAP = String(toAmPm || \"\")\r\n    .trim()\r\n    .toUpperCase();\r\n\r\n  // validate\r\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\r\n\r\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\r\n  // 12 AM -> 0, 12 PM -> 12\r\n  let fromH24 = fH % 12;\r\n  if (fAP === \"PM\") fromH24 += 12;\r\n\r\n  let toH24 = tH % 12;\r\n  if (tAP === \"PM\") toH24 += 12;\r\n\r\n  const fromTotalMin = fromH24 * 60 + fM;\r\n  const toTotalMin = toH24 * 60 + tM;\r\n\r\n  let minutesSlept = toTotalMin - fromTotalMin;\r\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\r\n\r\n  const hours = minutesSlept / 60;\r\n  // return Number cu o zecimală\r\n  return parseFloat(hours.toFixed(1));\r\n}\r\n","import calculateIntervalSleeptHours from \"./calculateIntervalSleeptHours\";\r\n\r\nexport default function getRegistrationsForAWeek(userData, param) {\r\n  const date = new Date();\r\n  const day = date.getDay(); // 0 = Duminică, 1 = Luni, ..., 6 = Sâmbătă\r\n  const diffToMonday = day === 0 ? -6 : 1 - day;\r\n\r\n  const startOfTheWeek = new Date(date);\r\n  startOfTheWeek.setDate(date.getDate() + diffToMonday);\r\n  // console.log(\"date.getDate() :\", date.getDate());\r\n  // date.getDate() : 19\r\n\r\n  startOfTheWeek.setHours(0, 0, 0, 0);\r\n  // console.log(\"startOfTheWeek :\", startOfTheWeek);\r\n  // getRegistrationsForAWeek.js:13 startOfTheWeek : Mon Sep 15 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\r\n\r\n  const weekTotal = [];\r\n\r\n  for (let index = 0; index < 7; index++) {\r\n    const currentDay = new Date(startOfTheWeek);\r\n    currentDay.setDate(startOfTheWeek.getDate() + index);\r\n\r\n    // console.log(\"currentDay:\", currentDay);\r\n    // getRegistrationsForAWeek.js:20 currentDay: Fri Sep 19 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\r\n\r\n    // console.log(\"startOfTheWeek.getDate() :\", startOfTheWeek.getDate());\r\n    // getRegistrationsForAWeek.js:21 startOfTheWeek.getDate() : 15\r\n\r\n    // console.log(\"currentDay.toDateString() :\", currentDay.toDateString());\r\n    // getRegistrationsForAWeek.js:22 currentDay.toDateString() : Thu Sep 18 2025\r\n\r\n    const dayData = userData.find(\r\n      (day) => new Date(day.date).toDateString() === currentDay.toDateString()\r\n    );\r\n\r\n    if (param === \"steps\") {\r\n      const totalSteps = dayData\r\n        ? dayData?.interval.reduce((acc, int) => acc + int.steps, 0)\r\n        : 0;\r\n      weekTotal.push({\r\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\r\n        \"Total steps\": totalSteps,\r\n      });\r\n    } else {\r\n      const totalSleptHours = dayData\r\n        ? dayData?.interval?.reduce((acc, int) => {\r\n            acc =\r\n              acc +\r\n              calculateIntervalSleeptHours(\r\n                int.fromHour,\r\n                int.fromMinute,\r\n                int.fromAmPm,\r\n                int.tillHour,\r\n                int.tillMinute,\r\n                int.tillAmPm\r\n              );\r\n            return acc;\r\n          }, 0)\r\n        : 0;\r\n      weekTotal.push({\r\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\r\n        \"Total hours\": totalSleptHours,\r\n      });\r\n    }\r\n  }\r\n\r\n  return weekTotal;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"SleepPage_cont__10mfN\",\"leftSideCont\":\"SleepPage_leftSideCont__XvbwR\",\"rightSideCont\":\"SleepPage_rightSideCont__FRW-8\",\"rightSideUpCont\":\"SleepPage_rightSideUpCont__EgcBp\",\"title\":\"SleepPage_title__wfPSw\",\"graphCont\":\"SleepPage_graphCont__34CAQ\",\"rightSideContTitle\":\"SleepPage_rightSideContTitle__OJCO7\",\"rightSideDate\":\"SleepPage_rightSideDate__+om4k\",\"dateWrapper\":\"SleepPage_dateWrapper__2Abr3\",\"paramInput\":\"SleepPage_paramInput__AdXKk\",\"fromToCont\":\"SleepPage_fromToCont__w5wsm\",\"fromToTitle\":\"SleepPage_fromToTitle__hT2xV\",\"from\":\"SleepPage_from__fHg-v\",\"to\":\"SleepPage_to__YVQoQ\",\"rem\":\"SleepPage_rem__Djaop\",\"lineRowCont\":\"SleepPage_lineRowCont__zibqQ\",\"lineRow\":\"SleepPage_lineRow__aylvZ\",\"timeInputGroup\":\"SleepPage_timeInputGroup__7fRyN\",\"removeBtn\":\"SleepPage_removeBtn__pti7o\",\"dash\":\"SleepPage_dash__BXYMY\",\"timeInput\":\"SleepPage_timeInput__iMFi5\",\"twoDots\":\"SleepPage_twoDots__oolSE\",\"ampmSelect\":\"SleepPage_ampmSelect__qDBzE\",\"addSleepCont\":\"SleepPage_addSleepCont__pw6Y1\",\"addBtn\":\"SleepPage_addBtn__D4OiX\",\"saveBtn\":\"SleepPage_saveBtn__wHra7\",\"adviceCont\":\"SleepPage_adviceCont__AE28N\",\"navBtn\":\"SleepPage_navBtn__j1dzh\"};","import SleepPage from \"./SleepPage\";\r\n\r\nexport default SleepPage;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport calculateSleepHours from \"../../Utils/calculateSleepHours\";\r\nimport calculateIntervalSleeptHours from \"../../Utils/calculateIntervalSleeptHours\";\r\nimport formatDate from \"../../Utils/formatDate\";\r\nimport getRegistrationsForAWeek from \"../../Utils/getRegistrationsForAWeek\";\r\n\r\nimport { usePrivate } from \"../../hooks/usePrivate\";\r\nimport { setSleepDailyRegistrations } from \"../../redux/private/operationsPrivate\";\r\n\r\nimport WeeklyChart from \"../../components/WeeklyChart\";\r\n\r\nimport styles from \"./SleepPage.module.css\";\r\n\r\nexport default function SleepPage() {\r\n  const navigate = useNavigate();\r\n\r\n  const { user, privateDispatch } = usePrivate();\r\n\r\n  const userConditions =\r\n    user?.age !== 0 &&\r\n    user?.height !== 0 &&\r\n    user?.weight !== 0 &&\r\n    user?.desiredWeight !== 0;\r\n\r\n  const age = user?.age ?? 0;\r\n\r\n  const sleep = useMemo(() => user?.sleep || [], [user?.sleep]);\r\n\r\n  const sleepHours = userConditions ? calculateSleepHours(age) : 0;\r\n\r\n  const [filterDate, setFilterDate] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n\r\n  const now = useMemo(() => new Date(), []);\r\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\r\n    2,\r\n    \"0\"\r\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\r\n\r\n  const isTodaycondition = filterDate === today;\r\n\r\n  const lines = useMemo(\r\n    () =>\r\n      sleep.length > 0\r\n        ? [...sleep]\r\n        : [\r\n            {\r\n              date: now,\r\n              interval: [\r\n                {\r\n                  fromHour: \"00\",\r\n                  fromMinute: \"00\",\r\n                  fromAmPm: \"AM\",\r\n                  tillHour: \"00\",\r\n                  tillMinute: \"00\",\r\n                  tillAmPm: \"AM\",\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n    [sleep, now]\r\n  );\r\n\r\n  const filteredLine = lines.find(\r\n    (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\r\n  );\r\n\r\n  const [interval, setInterval] = useState([\r\n    {\r\n      fromHour: \"00\",\r\n      fromMinute: \"00\",\r\n      fromAmPm: \"AM\",\r\n      tillHour: \"00\",\r\n      tillMinute: \"00\",\r\n      tillAmPm: \"AM\",\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (filteredLine) {\r\n      const sorted = [...filteredLine.interval].sort(\r\n        (a, b) =>\r\n          toMinutes(a.fromHour, a.fromMinute, a.fromAmPm) -\r\n          toMinutes(b.fromHour, b.fromMinute, b.fromAmPm)\r\n      );\r\n      setInterval(sorted);\r\n    }\r\n  }, [filteredLine]);\r\n\r\n  useEffect(() => {\r\n    const line = lines.find(\r\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\r\n    );\r\n\r\n    if (line) {\r\n      const sorted = [...line.interval].sort(\r\n        (a, b) =>\r\n          toMinutes(a.fromHour, a.fromMinute, a.fromAmPm) -\r\n          toMinutes(b.fromHour, b.fromMinute, b.fromAmPm)\r\n      );\r\n      setInterval(sorted);\r\n    } else {\r\n      setInterval([\r\n        {\r\n          fromHour: \"00\",\r\n          fromMinute: \"00\",\r\n          fromAmPm: \"AM\",\r\n          tillHour: \"00\",\r\n          tillMinute: \"00\",\r\n          tillAmPm: \"AM\",\r\n        },\r\n      ]);\r\n    }\r\n  }, [filterDate, sleep, lines]);\r\n\r\n  const totalSleptHours = interval?.reduce((acc, int) => {\r\n    acc =\r\n      acc +\r\n      calculateIntervalSleeptHours(\r\n        int.fromHour,\r\n        int.fromMinute,\r\n        int.fromAmPm,\r\n        int.tillHour,\r\n        int.tillMinute,\r\n        int.tillAmPm\r\n      );\r\n    return acc;\r\n  }, 0);\r\n\r\n  const lastInterval = interval[interval.length - 1];\r\n\r\n  const emptyLineCondition = (line) =>\r\n    Number(String(line.fromHour).trim()) +\r\n      Number(String(line.fromMinute).trim()) +\r\n      Number(String(line.tillHour).trim()) +\r\n      Number(String(line.tillMinute).trim()) ===\r\n      0 &&\r\n    String(line.fromAmPm).trim().toUpperCase() === \"AM\" &&\r\n    String(line.tillAmPm).trim().toUpperCase() === \"AM\";\r\n\r\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\r\n\r\n  const formatNumber = (num) => String(num).padStart(2, \"0\");\r\n\r\n  function toMinutes(hour, minute, ampm) {\r\n    let h = parseInt(hour, 10) % 12;\r\n    if (ampm === \"PM\") h += 12;\r\n    return h * 60 + parseInt(minute, 10);\r\n  }\r\n\r\n  function overlaps(newInt, allIntervals, idx) {\r\n    const newFrom = toMinutes(\r\n      newInt.fromHour,\r\n      newInt.fromMinute,\r\n      newInt.fromAmPm\r\n    );\r\n    const newTill = toMinutes(\r\n      newInt.tillHour,\r\n      newInt.tillMinute,\r\n      newInt.tillAmPm\r\n    );\r\n\r\n    for (let i = 0; i < allIntervals.length; i++) {\r\n      if (i === idx) continue;\r\n      const int = allIntervals[i];\r\n      const from = toMinutes(int.fromHour, int.fromMinute, int.fromAmPm);\r\n      const till = toMinutes(int.tillHour, int.tillMinute, int.tillAmPm);\r\n\r\n      if (newFrom < till && newTill > from) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\r\n    let val = parseInt(value, 10);\r\n\r\n    if ([\"fromHour\", \"tillHour\"].includes(field)) {\r\n      if (isNaN(val) || val < 0) val = 0;\r\n      if (val > 11) val = 11;\r\n      value = formatNumber(val);\r\n    }\r\n\r\n    if ([\"fromMinute\", \"tillMinute\"].includes(field)) {\r\n      if (isNaN(val) || val < 0) val = 0;\r\n      if (val > 59) val = 59;\r\n      value = formatNumber(val);\r\n    }\r\n\r\n    const newInterval = [...interval];\r\n    const updated = { ...newInterval[intervalIdx], [field]: value };\r\n\r\n    // verificăm dacă se suprapun intervalele de somn\r\n    if (overlaps(updated, newInterval, intervalIdx)) {\r\n      toast.error(\"Intervalele de somn nu trebuie să se suprapună!\");\r\n      return;\r\n    }\r\n\r\n    newInterval[intervalIdx] = updated;\r\n    setInterval(newInterval);\r\n  };\r\n\r\n  const addFilteredLineNewInterval = () => {\r\n    const newInterval = [...interval] || [];\r\n    newInterval.push({\r\n      fromHour: \"00\",\r\n      fromMinute: \"00\",\r\n      fromAmPm: \"AM\",\r\n      tillHour: \"00\",\r\n      tillMinute: \"00\",\r\n      tillAmPm: \"AM\",\r\n    });\r\n    setInterval(newInterval);\r\n  };\r\n\r\n  const removeFilteredLineInterval = (intervalIdx) => {\r\n    const newInterval = interval.filter((_, i) => i !== intervalIdx);\r\n    setInterval(newInterval);\r\n  };\r\n\r\n  const resetFilteredLinesInterval = () => {\r\n    setInterval([\r\n      {\r\n        fromHour: \"00\",\r\n        fromMinute: \"00\",\r\n        fromAmPm: \"AM\",\r\n        tillHour: \"00\",\r\n        tillMinute: \"00\",\r\n        tillAmPm: \"AM\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  function handleSave() {\r\n    const lastIntervalIndex = interval.length - 1;\r\n    const intervalToSave = emptyLastIntervalLineCondition\r\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\r\n      : [...interval];\r\n    privateDispatch(\r\n      setSleepDailyRegistrations({ date: filterDate, interval: intervalToSave })\r\n    );\r\n  }\r\n\r\n  const weeklySleep = getRegistrationsForAWeek(sleep, \"sleep\");\r\n\r\n  return (\r\n    <div className={styles.cont}>\r\n      <div className={styles.leftSideCont}>\r\n        <div className={styles.rightSideUpCont}>\r\n          <h1 className={styles.title}>Sleep statistics</h1>\r\n          <div className={styles.graphCont}>\r\n            <WeeklyChart\r\n              target={sleepHours}\r\n              weeklyData={weeklySleep}\r\n              type={\"sleep\"}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className={styles.adviceCont}>\r\n          <h2 className={styles.adviceTitle}>Total sleep hours</h2>\r\n          {totalSleptHours !== 0 ? (\r\n            <p\r\n              style={{\r\n                fontSize: \"clamp(11px, 1.5vw, 14px)\",\r\n                color:\r\n                  totalSleptHours < sleepHours * 0.6 ||\r\n                  totalSleptHours > sleepHours * 1.2\r\n                    ? \"red\"\r\n                    : undefined,\r\n              }}\r\n              className={styles.advicep}\r\n            >\r\n              <span>\r\n                You have {totalSleptHours}{\" \"}\r\n                {totalSleptHours === 1 ? \"hour\" : \"hours\"} of sleep for{\" \"}\r\n              </span>{\" \"}\r\n              <span style={{ marginLeft: \"2px\" }}>\r\n                {isTodaycondition ? \"today\" : formatDate(filterDate)}\r\n              </span>\r\n            </p>\r\n          ) : (\r\n            <p style={{ color: \"red\" }} className={styles.advicep}>\r\n              No sleep records for{\" \"}\r\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.rightSideCont}>\r\n        <div className={styles.rightSideUpCont}>\r\n          <h1 className={styles.title}>Add sleep</h1>\r\n          {/* data */}\r\n          <div className={styles.rightSideDate}>\r\n            <div className={styles.dateWrapper}>\r\n              <input\r\n                max={today}\r\n                type=\"date\"\r\n                value={filterDate ?? today}\r\n                onChange={(e) => setFilterDate(e.target.value)}\r\n                className={styles.paramInput}\r\n              />\r\n            </div>\r\n            <p className={styles.rightSideDateP}>Choose date</p>\r\n          </div>\r\n\r\n          <div className={styles.fromToCont}>\r\n            <div className={styles.fromToTitle}>\r\n              <p className={styles.from}>From</p>\r\n              <p className={styles.rem}>\r\n                {lines.length > 1 ? \"Delete\" : \"Reset\"}\r\n              </p>\r\n              <p className={styles.to}>Till</p>\r\n            </div>\r\n            <div className={styles.lineRowCont}>\r\n              {interval.map((line, idx) => (\r\n                <div key={`line-${idx}`} className={styles.lineRow}>\r\n                  <div className={styles.timeInputGroup}>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"11\"\r\n                      step=\"1\"\r\n                      value={line.fromHour}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"fromHour\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.timeInput}\r\n                    />\r\n                    <span className={styles.twoDots}>:</span>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"55\"\r\n                      step=\"1\"\r\n                      value={line.fromMinute}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"fromMinute\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.timeInput}\r\n                    />\r\n                    <select\r\n                      value={line.fromAmPm}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"fromAmPm\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.ampmSelect}\r\n                    >\r\n                      <option value=\"AM\">AM</option>\r\n                      <option value=\"PM\">PM</option>\r\n                    </select>\r\n                  </div>\r\n                  {interval.length > 1 ? (\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => removeFilteredLineInterval(idx)}\r\n                      className={styles.removeBtn}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  ) : (\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => resetFilteredLinesInterval()}\r\n                      className={styles.removeBtn}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  )}\r\n                  <div className={styles.timeInputGroup}>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"11\"\r\n                      step=\"1\"\r\n                      value={line.tillHour}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"tillHour\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.timeInput}\r\n                    />\r\n                    <span className={styles.twoDots}>:</span>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      max=\"55\"\r\n                      step=\"1\"\r\n                      value={line.tillMinute}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"tillMinute\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.timeInput}\r\n                    />\r\n                    <select\r\n                      value={line.tillAmPm}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"tillAmPm\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.ampmSelect}\r\n                    >\r\n                      <option value=\"AM\">AM</option>\r\n                      <option value=\"PM\">PM</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className={styles.addSleepCont}>\r\n            <p>Add sleep period</p>\r\n            <button\r\n              onClick={() => {\r\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\r\n              }}\r\n              type=\"button\"\r\n              className={styles.addBtn}\r\n            >\r\n              Add +\r\n            </button>\r\n\r\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\r\n              interval.length > 1) && (\r\n              <button\r\n                onClick={handleSave}\r\n                type=\"button\"\r\n                className={styles.saveBtn}\r\n              >\r\n                Save\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.adviceCont}>\r\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\r\n          {age !== 0 ? (\r\n            <p className={styles.advicep}>\r\n              Try to get at least {sleepHours} hours of sleep .\r\n            </p>\r\n          ) : (\r\n            <p\r\n              style={{\r\n                color: \"red\",\r\n                background: \"var(--Gray5)\",\r\n                textAlign: \"left\",\r\n                flexWrap: \"wrap\",\r\n                gap: \"3px\",\r\n                justifyContent: \"flex-start\",\r\n                height: \"fit-content\",\r\n                fontSize: \"clamp(11px, 2.5vw, 12px)\",\r\n              }}\r\n              className={styles.advicep}\r\n            >\r\n              Personal info missing. Please click\r\n              <button\r\n                className={styles.navBtn}\r\n                onClick={() => navigate(\"/\")}\r\n                type=\"button\"\r\n              >\r\n                Diet Calculator\r\n              </button>{\" \"}\r\n              to update !\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function formatDate(inputDate) {\r\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\r\n\r\n  const dateObj = new Date(year, month - 1, day);\r\n\r\n  const dayName = days[dateObj.getDay()];\r\n  const monthName = months[month - 1];\r\n\r\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"barChart\":\"WeeklyChart_barChart__dFSjt\"};","import WeeklyChart from \"./WeeklyChart\";\r\n\r\nexport default WeeklyChart;\r\n","import React from \"react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  CartesianGrid,\r\n  Cell,\r\n} from \"recharts\";\r\n\r\nimport styles from \"./WeeklyChart.module.css\";\r\n\r\nexport default function WeeklyChart({ weeklyData, type, target }) {\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <ResponsiveContainer width=\"100%\">\r\n        <BarChart\r\n          data={weeklyData}\r\n          margin={{\r\n            top: 15,\r\n            right: 15,\r\n            left: type === \"steps\" ? -10 : -25,\r\n            bottom: 5,\r\n          }}\r\n          className={styles.barChart}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"day\" />\r\n          <YAxis />\r\n          <Tooltip\r\n            contentStyle={{ color: \"var(--brand-color)\", fontWeight: \"700\" }}\r\n          />\r\n          <Bar\r\n            dataKey={type === \"sleep\" ? \"Total hours\" : \"Total steps\"}\r\n            radius={[6, 6, 0, 0]}\r\n          >\r\n            {weeklyData.map((entry, index) => {\r\n              const value =\r\n                type === \"sleep\" ? entry[\"Total hours\"] : entry[\"Total steps\"];\r\n\r\n              const fillColor =\r\n                (type === \"sleep\" &&\r\n                  (value < target * 0.6 || value > target + 1)) ||\r\n                (type === \"steps\" && value < target * 0.6)\r\n                  ? \"red\"\r\n                  : type === \"steps\" &&\r\n                    value >= target * 0.6 &&\r\n                    value <= target * 0.8\r\n                  ? \"var(--brand-color)\"\r\n                  : \"#4cafef\";\r\n              return <Cell key={`cell-${index}`} fill={fillColor} />;\r\n            })}\r\n          </Bar>\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["calculateSleepHours","age","sleepRange","arguments","length","undefined","min","calculateIntervalSleeptHours","fromHour","fromMinute","fromAmPm","toHour","toMinute","toAmPm","fH","Number","String","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","getRegistrationsForAWeek","userData","param","date","Date","day","getDay","diffToMonday","startOfTheWeek","setDate","getDate","setHours","weekTotal","index","currentDay","dayData","find","toDateString","totalSteps","interval","reduce","acc","int","steps","push","toLocaleDateString","weekday","_dayData$interval","totalSleptHours","tillHour","tillMinute","tillAmPm","_user$age","navigate","useNavigate","user","privateDispatch","usePrivate","userConditions","height","weight","desiredWeight","sleep","useMemo","sleepHours","filterDate","setFilterDate","useState","toISOString","split","now","today","concat","getFullYear","getMonth","padStart","isTodaycondition","lines","filteredLine","line","setInterval","useEffect","sorted","sort","a","b","toMinutes","lastInterval","emptyLastIntervalLineCondition","formatNumber","num","hour","minute","ampm","h","parseInt","updateFilteredLineInterval","intervalIdx","field","value","val","includes","newInterval","updated","_objectSpread","newInt","allIntervals","idx","newFrom","newTill","i","from","overlaps","toast","error","weeklySleep","_jsxs","className","styles","cont","children","leftSideCont","rightSideUpCont","_jsx","title","graphCont","WeeklyChart","target","weeklyData","type","adviceCont","adviceTitle","style","fontSize","color","advicep","marginLeft","formatDate","rightSideCont","rightSideDate","dateWrapper","max","onChange","e","paramInput","rightSideDateP","fromToCont","fromToTitle","rem","to","lineRowCont","map","lineRow","timeInputGroup","step","timeInput","twoDots","ampmSelect","onClick","filter","_","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","addBtn","lastIntervalIndex","intervalToSave","setSleepDailyRegistrations","saveBtn","background","textAlign","flexWrap","gap","justifyContent","navBtn","inputDate","year","month","dayName","monthName","_ref","width","ResponsiveContainer","BarChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","contentStyle","fontWeight","Bar","radius","entry","fillColor","Cell","fill"],"sourceRoot":""}
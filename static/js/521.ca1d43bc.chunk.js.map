{"version":3,"file":"static/js/521.ca1d43bc.chunk.js","mappings":"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","sources":["Utils/createEventFromReminder.js","webpack://health-monitor/./src/components/AlertForm/AlertForm.module.css?d0cc","components/AlertForm/AlertForm.jsx","webpack://health-monitor/./src/pages/AlertsPage/AlertsPage.module.css?ad2e","pages/AlertsPage/AlertsPage.jsx","pages/AlertsPage/index.js"],"sourcesContent":["// Utils/createEventFromReminder.js\r\nexport default function createEventFromReminder(rem, viewStart, viewEnd) {\r\n  if (!rem.active) return [];\r\n\r\n  const [hour, minute] = rem.time.split(\":\").map(Number);\r\n  const [endHour, endMinute] = rem.end\r\n    ? rem.end.split(\":\").map(Number)\r\n    : [hour + 1, minute];\r\n\r\n  const events = [];\r\n  const doneDates = rem.doneDates || [];\r\n\r\n  // calculează repeatHours din string, ex: \"2 hours\" → 2\r\n  let repeatHours = 0;\r\n  if (typeof rem.repeat === \"string\" && rem.repeat !== \"noRepeat\") {\r\n    repeatHours = parseInt(rem.repeat, 10);\r\n  }\r\n\r\n  // dacă repeatHours < 1 => considerăm că nu se repetă\r\n  if (isNaN(repeatHours) || repeatHours < 1) repeatHours = 0;\r\n\r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n\r\n  const current = new Date(viewStart);\r\n\r\n  while (current <= viewEnd) {\r\n    const day = current.getDay(); // 0=Su,1=Mo,...6=Sa\r\n    const dateStr = current\r\n      .toLocaleDateString(\"ro-RO\", {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n      })\r\n      .split(\".\")\r\n      .reverse()\r\n      .join(\"-\"); // format YYYY-MM-DD\r\n\r\n    // ignoră zilele trecute\r\n    if (current < today) {\r\n      current.setDate(current.getDate() + 1);\r\n      continue;\r\n    }\r\n\r\n    const pushEventsForDay = () => {\r\n      const startTime = new Date(current);\r\n      startTime.setHours(hour, minute, 0, 0);\r\n\r\n      const endTime = new Date(current);\r\n      endTime.setHours(endHour, endMinute, 0, 0);\r\n\r\n      if (repeatHours > 0) {\r\n        // repetă la interval de repeatHours între start și end\r\n        let tempStart = new Date(startTime);\r\n        while (tempStart < endTime) {\r\n          const tempEnd = new Date(tempStart);\r\n          tempEnd.setMinutes(tempEnd.getMinutes() + 1); // durata scurtă, poate fi modificată\r\n          events.push({\r\n            id: `${rem._id}-${+tempStart}`,\r\n            title: rem.text,\r\n            start: new Date(tempStart),\r\n            end: new Date(tempEnd),\r\n          });\r\n          tempStart.setHours(tempStart.getHours() + repeatHours);\r\n        }\r\n      } else {\r\n        // eveniment normal între time și end\r\n        events.push({\r\n          id: `${rem._id}-${+startTime}`,\r\n          title: rem.text,\r\n          start: startTime,\r\n          end: endTime,\r\n        });\r\n      }\r\n    };\r\n\r\n    // DAILY\r\n    if (rem.frequency === \"daily\" && !doneDates.includes(dateStr)) {\r\n      pushEventsForDay();\r\n    }\r\n\r\n    // WEEKLY (array de coduri zile)\r\n    if (\r\n      Array.isArray(rem.frequency) &&\r\n      rem.frequency.includes(dayToCode(day))\r\n    ) {\r\n      if (!doneDates.includes(dateStr)) pushEventsForDay();\r\n    }\r\n\r\n    // MONTHLY (ex: \"15 monthly\")\r\n    if (\r\n      typeof rem.frequency === \"string\" &&\r\n      rem.frequency.includes(\"monthly\")\r\n    ) {\r\n      const dayOfMonth = parseInt(rem.frequency, 10);\r\n      if (current.getDate() === dayOfMonth && !doneDates.includes(dateStr)) {\r\n        pushEventsForDay();\r\n      }\r\n    }\r\n\r\n    // FIXED DATE (ex: \"2025-09-20\")\r\n    if (/^\\d{4}-\\d{2}-\\d{2}$/.test(rem.frequency)) {\r\n      const [y, m, d] = rem.frequency.split(\"-\").map(Number);\r\n      if (\r\n        current.getFullYear() === y &&\r\n        current.getMonth() === m - 1 &&\r\n        current.getDate() === d &&\r\n        !doneDates.includes(dateStr)\r\n      ) {\r\n        pushEventsForDay();\r\n      }\r\n    }\r\n\r\n    current.setDate(current.getDate() + 1);\r\n  }\r\n\r\n  return events;\r\n}\r\n\r\n// helper pentru a converti day numeric -> cod zi (0=Su,..)\r\nfunction dayToCode(dayNum) {\r\n  const map = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\r\n  return map[dayNum];\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formModalCont\":\"AlertForm_formModalCont__X+ecJ\",\"form\":\"AlertForm_form__3yYVH\",\"close\":\"AlertForm_close__sNrIJ\",\"inputGroup\":\"AlertForm_inputGroup__HoSLd\",\"weekly\":\"AlertForm_weekly__DWHvO\",\"checkboxLabel\":\"AlertForm_checkboxLabel__k8Uno\",\"smallBtn\":\"AlertForm_smallBtn__wGYRD\",\"buttonGroup\":\"AlertForm_buttonGroup__OOApd\",\"saveBtn\":\"AlertForm_saveBtn__JcQNo\",\"cancelBtn\":\"AlertForm_cancelBtn__U0ivJ\"};","import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./AlertForm.module.css\";\r\n\r\nconst daysOfWeek = [\"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"];\r\n\r\nconst now = new Date();\r\nconst today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\r\n  2,\r\n  \"0\"\r\n)}-${String(now.getDate()).padStart(2, \"0\")}`;\r\n\r\nexport default function AlertForm({ onClose, handleSubmit, data, editId }) {\r\n  const modalRef = useRef();\r\n\r\n  const [freqType, setFreqType] = useState(() => {\r\n    if (data.frequency === \"daily\") return \"daily\";\r\n    if (\r\n      typeof data.frequency === \"string\" &&\r\n      data.frequency.includes(\"monthly\")\r\n    )\r\n      return \"monthly\";\r\n    if (\r\n      typeof data.frequency === \"string\" &&\r\n      /^\\d{4}-\\d{2}-\\d{2}$/.test(data.frequency)\r\n    )\r\n      return \"date\";\r\n    if (Array.isArray(data.frequency)) return \"weekly\";\r\n    return \"weekly\";\r\n  });\r\n\r\n  const [localFrequency, setLocalFrequency] = useState(\r\n    Array.isArray(data.frequency) ? [...data.frequency] : []\r\n  );\r\n\r\n  const [formData, setFormData] = useState({\r\n    ...data,\r\n    frequency: data.frequency,\r\n  });\r\n\r\n  const [filterDate, setFilterDate] = useState(today);\r\n\r\n  useEffect(() => {\r\n    document.body.style.overflow = \"hidden\";\r\n    const addCloseEvent = (event) => {\r\n      if (event.key === \"Escape\") onClose();\r\n    };\r\n    document.addEventListener(\"keydown\", addCloseEvent);\r\n    return () => {\r\n      document.body.style.overflow = \"auto\";\r\n      document.removeEventListener(\"keydown\", addCloseEvent);\r\n    };\r\n  }, [onClose]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(data.frequency)) setLocalFrequency([...data.frequency]);\r\n  }, [data.frequency]);\r\n\r\n  const handleSet = (field, value) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handleWeeklyChange = (day) => {\r\n    let updated = localFrequency.includes(day)\r\n      ? localFrequency.filter((d) => d !== day)\r\n      : [...localFrequency, day];\r\n\r\n    if (updated.length === 7) {\r\n      setFreqType(\"daily\");\r\n      setLocalFrequency([]);\r\n      handleSet(\"frequency\", \"daily\");\r\n    } else {\r\n      setLocalFrequency(updated);\r\n      handleSet(\"frequency\", updated);\r\n    }\r\n  };\r\n\r\n  const handleMonthlyChange = (day) => handleSet(\"frequency\", `${day} monthly`);\r\n  const handleDateChange = (dateStr) => handleSet(\"frequency\", dateStr);\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let frequencyValue;\r\n\r\n    if (freqType === \"daily\") {\r\n      frequencyValue = \"daily\";\r\n    } else if (freqType === \"weekly\") {\r\n      frequencyValue = localFrequency; // array cu zile\r\n    } else if (freqType === \"monthly\") {\r\n      frequencyValue = formData.frequency; // ex: \"15 monthly\"\r\n    } else if (freqType === \"date\") {\r\n      frequencyValue = filterDate; // ex: \"2025-09-13\"\r\n    } else {\r\n      frequencyValue = formData.frequency; // fallback\r\n    }\r\n\r\n    const submitData = {\r\n      ...formData,\r\n      frequency: frequencyValue,\r\n    };\r\n\r\n    handleSubmit(submitData);\r\n  };\r\n\r\n  const alertCondition =\r\n    formData.type === \"alert\" || formData.type === \"metrix\";\r\n\r\n  const closeOnClickOutside = (event) => {\r\n    if (event.currentTarget === event.target) onClose();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={modalRef}\r\n      onClick={closeOnClickOutside}\r\n      className={styles.formModalCont}\r\n    >\r\n      <form className={styles.form} onSubmit={handleFormSubmit}>\r\n        <button className={styles.close} onClick={onClose} type=\"button\">\r\n          x\r\n        </button>\r\n\r\n        {alertCondition && (\r\n          <div className={styles.inputGroup}>\r\n            <label>Reminder Text</label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter reminder\"\r\n              value={formData.text}\r\n              onChange={(e) => handleSet(\"text\", e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className={styles.inputGroup}>\r\n          <label>Time</label>\r\n          <input\r\n            type=\"time\"\r\n            value={formData.time}\r\n            onChange={(e) => handleSet(\"time\", e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n\r\n        {alertCondition && (\r\n          <>\r\n            <div className={styles.inputGroup}>\r\n              <label>Frequency</label>\r\n              <select\r\n                value={freqType}\r\n                onChange={(e) => {\r\n                  setFreqType(e.target.value);\r\n                  if (e.target.value === \"daily\")\r\n                    handleSet(\"frequency\", \"daily\");\r\n                  if (e.target.value === \"weekly\") handleSet(\"frequency\", []);\r\n                }}\r\n              >\r\n                <option value=\"daily\">Daily</option>\r\n                <option value=\"weekly\">Weekly (choose days)</option>\r\n                <option value=\"monthly\">Monthly (choose day)</option>\r\n                <option value=\"date\">Specific Date</option>\r\n              </select>\r\n            </div>\r\n\r\n            {freqType === \"weekly\" && (\r\n              <div className={styles.weekly}>\r\n                {daysOfWeek.map((day) => (\r\n                  <label key={day} className={styles.checkboxLabel}>\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={localFrequency.includes(day)}\r\n                      onChange={() => handleWeeklyChange(day)}\r\n                    />\r\n                    {day}\r\n                  </label>\r\n                ))}\r\n                <button\r\n                  type=\"button\"\r\n                  className={styles.smallBtn}\r\n                  onClick={() => {\r\n                    setFreqType(\"daily\");\r\n                    setLocalFrequency([]);\r\n                    handleSet(\"frequency\", \"daily\");\r\n                  }}\r\n                >\r\n                  All\r\n                </button>\r\n              </div>\r\n            )}\r\n\r\n            {freqType === \"monthly\" && (\r\n              <div className={styles.inputGroup}>\r\n                <label>Day of Month</label>\r\n                <input\r\n                  type=\"number\"\r\n                  min={1}\r\n                  max={31}\r\n                  step={1}\r\n                  value={parseInt(formData.frequency) || \"\"}\r\n                  onChange={(e) =>\r\n                    handleMonthlyChange(parseInt(e.target.value))\r\n                  }\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {freqType === \"date\" && (\r\n              <div className={styles.inputGroup}>\r\n                <label>Specific Date</label>\r\n                <input\r\n                  style={{ color: \"blue\", fontWeight: \"bold\" }}\r\n                  type=\"date\"\r\n                  min={today}\r\n                  value={\r\n                    /^\\d{4}-\\d{2}-\\d{2}$/.test(formData.frequency)\r\n                      ? formData.frequency\r\n                      : filterDate\r\n                  }\r\n                  onChange={(e) => {\r\n                    handleDateChange(e.target.value);\r\n                    setFilterDate(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        <div className={styles.inputGroup}>\r\n          <label>Repeat Interval (hours)</label>\r\n          <input\r\n            type=\"number\"\r\n            min={1}\r\n            max={12}\r\n            step={1}\r\n            value={\r\n              formData.repeat === \"noRepeat\"\r\n                ? \"\"\r\n                : parseInt(formData.repeat) || \"\"\r\n            }\r\n            onChange={(e) => {\r\n              const h = parseInt(e.target.value);\r\n              if (isNaN(h) || h < 1) {\r\n                handleSet(\"repeat\", \"noRepeat\");\r\n              } else {\r\n                handleSet(\"repeat\", h === 1 ? \"1 hour\" : `${h} hours`);\r\n              }\r\n            }}\r\n            placeholder=\"No Repeat\"\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.buttonGroup}>\r\n          <button type=\"submit\" className={styles.saveBtn}>\r\n            {editId ? \"Update Reminder\" : \"Add Reminder\"}\r\n          </button>\r\n          <button type=\"button\" onClick={onClose} className={styles.cancelBtn}>\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nAlertForm.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  data: PropTypes.object.isRequired,\r\n  editId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"AlertsPage_cont__lgJvS\",\"leftSideCont\":\"AlertsPage_leftSideCont__gIQ7C\",\"rightSideCont\":\"AlertsPage_rightSideCont__oKjoy\",\"title\":\"AlertsPage_title__KTUfV\",\"rightSideTitle\":\"AlertsPage_rightSideTitle__YCVDo\",\"headerBox\":\"AlertsPage_headerBox__JBWjY\",\"addBtn\":\"AlertsPage_addBtn__J3uL2\",\"main\":\"AlertsPage_main__wReC7\",\"calendarBox\":\"AlertsPage_calendarBox__wJjzh\",\"calendar\":\"AlertsPage_calendar__UjQk9\",\"rbc-today\":\"AlertsPage_rbc-today__aKeVA\",\"rbc-time-slot\":\"AlertsPage_rbc-time-slot__qKvOI\",\"rbc-event\":\"AlertsPage_rbc-event__Nw98E\",\"remindersList\":\"AlertsPage_remindersList__uqaaM\",\"reminderItem\":\"AlertsPage_reminderItem__BsyI4\",\"closeBtn\":\"AlertsPage_closeBtn__6SHjn\",\"reminderItemDetailsCont\":\"AlertsPage_reminderItemDetailsCont__Smfyq\",\"actions\":\"AlertsPage_actions__FN567\",\"insideActions\":\"AlertsPage_insideActions__Z9QzG\",\"link\":\"AlertsPage_link__LwdCK\",\"stopBtn\":\"AlertsPage_stopBtn__1N13F\",\"goBtn\":\"AlertsPage_goBtn__kF1nZ\",\"startBtn\":\"AlertsPage_startBtn__q5+1t\",\"doneBtn\":\"AlertsPage_doneBtn__el0Zj\",\"editBtn\":\"AlertsPage_editBtn__utlnh\",\"doneLabel\":\"AlertsPage_doneLabel__RMzO+\"};","import { useState, useMemo, useEffect } from \"react\";\r\nimport { usePrivate } from \"../../hooks/usePrivate\";\r\nimport {\r\n  addEditReminder,\r\n  deleteReminder,\r\n} from \"../../redux/private/operationsPrivate\";\r\nimport { Link } from \"react-router-dom\";\r\nimport createEventFromReminder from \"../../Utils/createEventFromReminder\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport AlertForm from \"../../components/AlertForm/AlertForm\";\r\nimport clsx from \"clsx\";\r\nimport styles from \"./AlertsPage.module.css\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport default function AlertsPage() {\r\n  const { user, privateDispatch } = usePrivate();\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [editId, setEditId] = useState(null);\r\n\r\n  const [formData, setFormData] = useState({\r\n    text: \"\",\r\n    time: \"\",\r\n    frequency: \"daily\",\r\n    repeat: \"noRepeat\",\r\n    end: \"23:00\",\r\n    type: \"alert\",\r\n    active: false,\r\n    doneDates: [],\r\n  });\r\n\r\n  const reminders = useMemo(() => {\r\n    const sortedReminders = [...(user?.reminders || [])].sort((a, b) => {\r\n      const [aH, aM] = a.time.split(\":\").map(Number);\r\n      const [bH, bM] = b.time.split(\":\").map(Number);\r\n\r\n      return aH !== bH ? aH - bH : aM - bM;\r\n    });\r\n\r\n    return [...sortedReminders];\r\n  }, [user.reminders]);\r\n  const [events, setEvents] = useState([]);\r\n\r\n  const handleAddEditReminder = (reminderData) =>\r\n    privateDispatch(addEditReminder(reminderData));\r\n\r\n  const handleSetData = (field, value) =>\r\n    setFormData((prev) => ({ ...prev, [field]: value }));\r\n\r\n  const handleCloseFormModal = () => {\r\n    setShowForm(false);\r\n    setEditId(null);\r\n    setFormData({\r\n      text: \"\",\r\n      time: \"\",\r\n      frequency: \"daily\",\r\n      repeat: \"noRepeat\",\r\n      end: \"23:00\",\r\n      type: \"alert\",\r\n      active: false,\r\n      doneDates: [],\r\n    });\r\n  };\r\n\r\n  const handleSubmitFormReminder = (reminderData) => {\r\n    if (!reminderData.text || !reminderData.time) {\r\n      alert(\"Please enter a reminder text and time.\");\r\n      return;\r\n    }\r\n    handleAddEditReminder({ ...reminderData, id: editId || undefined });\r\n    handleCloseFormModal();\r\n  };\r\n\r\n  const handleActiveTrue = (id) =>\r\n    reminders.forEach(\r\n      (r) =>\r\n        r._id === id && handleAddEditReminder({ ...r, id: r._id, active: true })\r\n    );\r\n\r\n  const handleActiveFalse = (id) =>\r\n    reminders.forEach(\r\n      (r) =>\r\n        r._id === id &&\r\n        handleAddEditReminder({ ...r, id: r._id, active: false })\r\n    );\r\n\r\n  const handleDoneForToday = (id) =>\r\n    reminders.forEach((r) => {\r\n      if (r._id === id) {\r\n        const doneDates = r.doneDates ? [...r.doneDates] : [];\r\n        const now = new Date();\r\n\r\n        const nowStr =\r\n          now\r\n            .toLocaleDateString(\"ro-RO\", {\r\n              year: \"numeric\",\r\n              month: \"2-digit\",\r\n              day: \"2-digit\",\r\n            })\r\n            .split(\".\")\r\n            .reverse()\r\n            .join(\"-\") +\r\n          ` ${String(now.getHours()).padStart(2, \"0\")}:${String(\r\n            now.getMinutes()\r\n          ).padStart(2, \"0\")}`;\r\n\r\n        if (!doneDates.includes(nowStr)) doneDates.push(nowStr);\r\n        handleAddEditReminder({ ...r, id: r._id, doneDates });\r\n      }\r\n    });\r\n\r\n  const handleGo = (id) =>\r\n    reminders.forEach((r) => (r._id === id ? handleDoneForToday(id) : null));\r\n\r\n  const handleDeleteReminder = (id) => privateDispatch(deleteReminder({ id }));\r\n\r\n  // ==== rerender automat la fiecare ora ====\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setEvents((prev) => [...prev]); // forțează rerender calendar\r\n      setFormData((f) => ({ ...f })); // forțează rerender lista reminders\r\n    }, 3600000); // 1 oră = 3600000ms\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.cont}>\r\n      {showForm && (\r\n        <AlertForm\r\n          onClose={handleCloseFormModal}\r\n          handleSubmit={handleSubmitFormReminder}\r\n          data={formData}\r\n          handleSet={handleSetData}\r\n          editId={editId}\r\n        />\r\n      )}\r\n\r\n      <div className={styles.leftSideCont}>\r\n        <div className={styles.headerBox}>\r\n          <h1 className={styles.title}>Calendar</h1>\r\n          <button onClick={() => setShowForm(true)} className={styles.addBtn}>\r\n            + Add Reminder\r\n          </button>\r\n        </div>\r\n\r\n        <div className={styles.calendarBox}>\r\n          <Calendar\r\n            localizer={localizer}\r\n            events={events}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            className={styles.calendar}\r\n            defaultView=\"week\"\r\n            defaultDate={new Date()}\r\n            onRangeChange={(range) => {\r\n              let viewStart, viewEnd;\r\n              if (Array.isArray(range)) {\r\n                viewStart = range[0];\r\n                viewEnd = range[range.length - 1];\r\n              } else {\r\n                viewStart = range.start;\r\n                viewEnd = range.end;\r\n              }\r\n              const todayLocal = new Date();\r\n              todayLocal.setHours(0, 0, 0, 0);\r\n\r\n              const newEvents = reminders\r\n                .filter((r) => r.active)\r\n                .flatMap((r) => createEventFromReminder(r, viewStart, viewEnd))\r\n                .filter((event) => event.start >= todayLocal);\r\n              setEvents(newEvents);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.rightSideCont}>\r\n        <h1 className={clsx(styles.title, styles.rightSideTitle)}>Reminders</h1>\r\n        <ul className={styles.remindersList}>\r\n          {reminders.map((rem) => {\r\n            const now = new Date();\r\n\r\n            const nowStr =\r\n              now\r\n                .toLocaleDateString(\"ro-RO\", {\r\n                  year: \"numeric\",\r\n                  month: \"2-digit\",\r\n                  day: \"2-digit\",\r\n                })\r\n                .split(\".\")\r\n                .reverse()\r\n                .join(\"-\") +\r\n              ` ${String(now.getHours()).padStart(2, \"0\")}:${String(\r\n                now.getMinutes()\r\n              ).padStart(2, \"0\")}`;\r\n\r\n            // verificăm dacă reminderul a fost făcut deja la ultima execuție\r\n            const doneToday = rem.doneDates?.some((d) => {\r\n              return d.split(\" \")[0] === nowStr.split(\" \")[0];\r\n            });\r\n\r\n            return (\r\n              <li key={`alerts-${rem._id}`} className={styles.reminderItem}>\r\n                {rem.type === \"alert\" && (\r\n                  <button\r\n                    type=\"button\"\r\n                    className={styles.closeBtn}\r\n                    onClick={() => handleDeleteReminder(rem._id)}\r\n                  >\r\n                    x\r\n                  </button>\r\n                )}\r\n                <div className={styles.reminderItemDetailsCont}>\r\n                  <span className={styles.text}>{rem.text} :</span>\r\n                  <div className={styles.timeCont}>\r\n                    <span className={styles.time}>{rem.time}</span>/\r\n                    <span className={styles.repeat}>\r\n                      {Array.isArray(rem.frequency)\r\n                        ? rem.frequency.join(\",\")\r\n                        : rem.frequency}\r\n                    </span>\r\n                    {rem.repeat !== \"noRepeat\" && (\r\n                      <span className={styles.repeat}>/{rem.repeat}</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className={styles.actions}>\r\n                  <div className={styles.insideActions}>\r\n                    <button\r\n                      className={clsx(\r\n                        rem.active ? styles.stopBtn : styles.startBtn\r\n                      )}\r\n                      onClick={() =>\r\n                        rem.active\r\n                          ? handleActiveFalse(rem._id)\r\n                          : handleActiveTrue(rem._id)\r\n                      }\r\n                    >\r\n                      {rem.active ? \"Stop\" : \"Start\"}\r\n                    </button>\r\n                    {rem.link && rem.active && !doneToday && (\r\n                      <Link className={styles.link} to={rem.link}>\r\n                        <button\r\n                          className={styles.goBtn}\r\n                          onClick={() => handleGo(rem._id)}\r\n                        >\r\n                          Go\r\n                        </button>\r\n                      </Link>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className={styles.insideActions}>\r\n                    {rem.active &&\r\n                      (!rem.done ? (\r\n                        !doneToday ? (\r\n                          <button\r\n                            className={styles.doneBtn}\r\n                            onClick={() => handleDoneForToday(rem._id)}\r\n                          >\r\n                            Done\r\n                          </button>\r\n                        ) : (\r\n                          <span\r\n                            style={{\r\n                              color: \"green\",\r\n                              fontWeight: \"600\",\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                              fontSize: \"clamp(11px, 1.5vw, 13px)\",\r\n                            }}\r\n                          >\r\n                            ✔ Done\r\n                          </span>\r\n                        )\r\n                      ) : (\r\n                        <span\r\n                          style={{\r\n                            color: \"green\",\r\n                            fontWeight: \"600\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            fontSize: \"clamp(11px, 1.5vw, 13px)\",\r\n                          }}\r\n                        >\r\n                          ✔ Done\r\n                        </span>\r\n                      ))}\r\n                    <button\r\n                      className={styles.editBtn}\r\n                      onClick={() => {\r\n                        setShowForm(true);\r\n                        setFormData({\r\n                          ...rem,\r\n                          doneDates: rem.doneDates || [],\r\n                        });\r\n                        setEditId(rem._id);\r\n                      }}\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import AlertsPage from \"./AlertsPage\";\r\n\r\nexport default AlertsPage;\r\n"],"names":["dayToCode","dayNum","daysOfWeek","now","Date","today","concat","getFullYear","String","getMonth","padStart","getDate","AlertForm","_ref","onClose","handleSubmit","data","editId","modalRef","useRef","freqType","setFreqType","useState","frequency","includes","test","Array","isArray","localFrequency","setLocalFrequency","formData","setFormData","_objectSpread","filterDate","setFilterDate","useEffect","document","body","style","overflow","addCloseEvent","event","key","addEventListener","removeEventListener","handleSet","field","value","prev","alertCondition","type","_jsx","ref","onClick","currentTarget","target","className","styles","children","_jsxs","onSubmit","e","frequencyValue","preventDefault","submitData","placeholder","text","onChange","required","time","_Fragment","map","day","checked","updated","filter","d","length","handleWeeklyChange","min","max","step","parseInt","handleMonthlyChange","color","fontWeight","dateStr","repeat","h","isNaN","localizer","momentLocalizer","moment","user","privateDispatch","usePrivate","showForm","setShowForm","setEditId","end","active","doneDates","reminders","useMemo","sort","a","b","aH","aM","split","Number","bH","bM","events","setEvents","handleAddEditReminder","reminderData","addEditReminder","handleCloseFormModal","handleDoneForToday","id","forEach","r","_id","nowStr","toLocaleDateString","year","month","reverse","join","getHours","getMinutes","push","interval","setInterval","f","clearInterval","cont","undefined","alert","handleSetData","leftSideCont","headerBox","title","addBtn","calendarBox","Calendar","startAccessor","endAccessor","calendar","defaultView","defaultDate","onRangeChange","range","viewStart","viewEnd","start","todayLocal","setHours","newEvents","flatMap","rem","hour","minute","endHour","endMinute","repeatHours","current","getDay","setDate","pushEventsForDay","startTime","endTime","tempStart","tempEnd","setMinutes","dayOfMonth","y","m","createEventFromReminder","rightSideCont","clsx","rightSideTitle","remindersList","_rem$doneDates","doneToday","some","reminderItem","closeBtn","handleDeleteReminder","deleteReminder","reminderItemDetailsCont","timeCont","actions","insideActions","stopBtn","startBtn","handleActiveTrue","link","Link","to","goBtn","handleGo","done","display","alignItems","fontSize","doneBtn","editBtn"],"sourceRoot":""}
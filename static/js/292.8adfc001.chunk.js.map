{"version":3,"file":"static/js/292.8adfc001.chunk.js","mappings":"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","sources":["Utils/calculateIntervalSleeptHours.js","Utils/getRegistrationsForAWeek.js","Utils/calculateDailySteps.js","Utils/formatDate.js","Utils/convertActivityToSteps.js","webpack://health-monitor/./src/components/ActivitySelect/ActivitySelect.module.css?1197","components/ActivitySelect/ActivitySelect.jsx","components/ActivitySelect/index.js","webpack://health-monitor/./src/pages/PsyhicalActivityPage/PsyhicalActivityPage.module.css?855d","pages/PsyhicalActivityPage/index.js","pages/PsyhicalActivityPage/PsyhicalActivityPage.jsx","Utils/calculateMinimumDailyActivity.js","webpack://health-monitor/./src/components/WeeklyChart/WeeklyChart.module.css?6b49","components/WeeklyChart/index.js","components/WeeklyChart/WeeklyChart.jsx"],"sourcesContent":["export default function calculateIntervalSleeptHours(\r\n  fromHour,\r\n  fromMinute,\r\n  fromAmPm,\r\n  toHour,\r\n  toMinute,\r\n  toAmPm\r\n) {\r\n  // normalize input (string -> number, trim)\r\n  const fH = Number(String(fromHour).trim());\r\n  //   console.log(\"fH :\", fH);\r\n\r\n  const fM = Number(String(fromMinute).trim());\r\n  const tH = Number(String(toHour).trim());\r\n  const tM = Number(String(toMinute).trim());\r\n  const fAP = String(fromAmPm || \"\")\r\n    .trim()\r\n    .toUpperCase();\r\n  //   console.log(\"fAP :\", fAP);\r\n\r\n  const tAP = String(toAmPm || \"\")\r\n    .trim()\r\n    .toUpperCase();\r\n\r\n  // validate\r\n  if ([fH, fM, tH, tM].some(Number.isNaN)) return 0;\r\n\r\n  // convert to 24h using modulo pentru a trata 12 AM / 12 PM corect:\r\n  // 12 AM -> 0, 12 PM -> 12\r\n  let fromH24 = fH % 12;\r\n  if (fAP === \"PM\") fromH24 += 12;\r\n\r\n  let toH24 = tH % 12;\r\n  if (tAP === \"PM\") toH24 += 12;\r\n\r\n  const fromTotalMin = fromH24 * 60 + fM;\r\n  const toTotalMin = toH24 * 60 + tM;\r\n\r\n  let minutesSlept = toTotalMin - fromTotalMin;\r\n  if (minutesSlept < 0) minutesSlept += 24 * 60; // overnight\r\n\r\n  const hours = minutesSlept / 60;\r\n  // return Number cu o zecimală\r\n  return parseFloat(hours.toFixed(1));\r\n}\r\n","import calculateIntervalSleeptHours from \"./calculateIntervalSleeptHours\";\r\n\r\nexport default function getRegistrationsForAWeek(userData, param) {\r\n  const date = new Date();\r\n  const day = date.getDay(); // 0 = Duminică, 1 = Luni, ..., 6 = Sâmbătă\r\n  const diffToMonday = day === 0 ? -6 : 1 - day;\r\n\r\n  const startOfTheWeek = new Date(date);\r\n  startOfTheWeek.setDate(date.getDate() + diffToMonday);\r\n  // console.log(\"date.getDate() :\", date.getDate());\r\n  // date.getDate() : 19\r\n\r\n  startOfTheWeek.setHours(0, 0, 0, 0);\r\n  // console.log(\"startOfTheWeek :\", startOfTheWeek);\r\n  // getRegistrationsForAWeek.js:13 startOfTheWeek : Mon Sep 15 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\r\n\r\n  const weekTotal = [];\r\n\r\n  for (let index = 0; index < 7; index++) {\r\n    const currentDay = new Date(startOfTheWeek);\r\n    currentDay.setDate(startOfTheWeek.getDate() + index);\r\n\r\n    // console.log(\"currentDay:\", currentDay);\r\n    // getRegistrationsForAWeek.js:20 currentDay: Fri Sep 19 2025 00:00:00 GMT+0300 (Eastern European Summer Time)\r\n\r\n    // console.log(\"startOfTheWeek.getDate() :\", startOfTheWeek.getDate());\r\n    // getRegistrationsForAWeek.js:21 startOfTheWeek.getDate() : 15\r\n\r\n    // console.log(\"currentDay.toDateString() :\", currentDay.toDateString());\r\n    // getRegistrationsForAWeek.js:22 currentDay.toDateString() : Thu Sep 18 2025\r\n\r\n    const dayData = userData.find(\r\n      (day) => new Date(day.date).toDateString() === currentDay.toDateString()\r\n    );\r\n\r\n    if (param === \"steps\") {\r\n      const totalSteps = dayData\r\n        ? dayData?.interval.reduce((acc, int) => acc + int.steps, 0)\r\n        : 0;\r\n      weekTotal.push({\r\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\r\n        \"Total steps\": totalSteps,\r\n      });\r\n    } else {\r\n      const totalSleptHours = dayData\r\n        ? dayData?.interval?.reduce((acc, int) => {\r\n            acc =\r\n              acc +\r\n              calculateIntervalSleeptHours(\r\n                int.fromHour,\r\n                int.fromMinute,\r\n                int.fromAmPm,\r\n                int.tillHour,\r\n                int.tillMinute,\r\n                int.tillAmPm\r\n              );\r\n            return acc;\r\n          }, 0)\r\n        : 0;\r\n      weekTotal.push({\r\n        day: currentDay.toLocaleDateString(\"en-US\", { weekday: \"short\" }),\r\n        \"Total hours\": totalSleptHours,\r\n      });\r\n    }\r\n  }\r\n\r\n  return weekTotal;\r\n}\r\n","export default function calculateDailySteps(\r\n  age,\r\n  currentWeight,\r\n  desiredWeight,\r\n  height\r\n) {\r\n  // Basal metabolic factor depending on age (younger -> higher activity need)\r\n  let ageFactor;\r\n  if (age < 30) ageFactor = 1.2;\r\n  else if (age < 50) ageFactor = 1.1;\r\n  else ageFactor = 1.0;\r\n\r\n  // Maintenance steps baseline (based on height and weight balance)\r\n  let baseSteps = 6000 + (height - 150) * 20;\r\n\r\n  // Difference between current and desired weight\r\n  let weightDiff = desiredWeight - currentWeight;\r\n\r\n  let adjustment;\r\n  if (weightDiff === 0) {\r\n    // Maintain weight\r\n    adjustment = 0;\r\n  } else if (weightDiff < 0) {\r\n    // Lose weight → increase steps\r\n    adjustment = Math.abs(weightDiff) * 200;\r\n  } else {\r\n    // Gain weight → fewer steps needed\r\n    adjustment = -weightDiff * 150;\r\n  }\r\n\r\n  // Final calculation with age factor\r\n  let dailySteps =\r\n    age && currentWeight && desiredWeight & height\r\n      ? Math.round((baseSteps + adjustment) * ageFactor)\r\n      : 0;\r\n\r\n  // Ensure a healthy minimum and maximum\r\n  if (dailySteps < 4000) dailySteps = 4000;\r\n  if (dailySteps > 15000) dailySteps = 15000;\r\n\r\n  return dailySteps;\r\n}\r\n","export default function formatDate(inputDate) {\r\n  const days = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const [year, month, day] = inputDate.split(\"-\").map(Number);\r\n\r\n  const dateObj = new Date(year, month - 1, day);\r\n\r\n  const dayName = days[dateObj.getDay()];\r\n  const monthName = months[month - 1];\r\n\r\n  return `${dayName}-${String(day).padStart(2, \"0\")}-${monthName}-${year}`;\r\n}\r\n","export default function convertActivityToSteps(\r\n  activity,\r\n  minutes,\r\n  age,\r\n  weight,\r\n  height,\r\n  intensity\r\n) {\r\n  if (!activity) {\r\n    return \"please input your exercise type\";\r\n  }\r\n\r\n  if (!age || !weight || !height) {\r\n    return 0;\r\n  }\r\n\r\n  const minutesNum = Number(minutes) || 0;\r\n\r\n  const activityMET = {\r\n    football: 8,\r\n    tennis: 7.3,\r\n    basketball: 6.5,\r\n    gym: 5,\r\n    fitness: 6,\r\n    cycling: 6,\r\n    running: 9.8,\r\n    jogging: 7,\r\n    swimming: 8,\r\n    hockey: 7,\r\n    rugby: 8,\r\n    volley: 5,\r\n    yoga: 3,\r\n    walking: 3.5,\r\n    dancing: 5.5,\r\n    skiing: 7,\r\n    snowboarding: 6.8,\r\n    surfing: 5,\r\n    boxing: 7.8,\r\n    climbing: 8,\r\n  };\r\n\r\n  const met = activityMET[activity.toLowerCase()] || 4;\r\n\r\n  let caloriesPerMin = 0.0175 * met * weight;\r\n\r\n  if (intensity === \"min\") {\r\n    caloriesPerMin *= 0.8;\r\n  } else if (intensity === \"max\") {\r\n    caloriesPerMin *= 1.2;\r\n  }\r\n\r\n  const totalCalories = caloriesPerMin * minutesNum;\r\n\r\n  const ageFactor = age < 30 ? 1.1 : age < 50 ? 1.0 : 0.9;\r\n\r\n  const adjustedCalories = totalCalories * ageFactor;\r\n\r\n  const steps = Math.round(adjustedCalories * 25);\r\n\r\n  return steps;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"selector\":\"ActivitySelect_selector__GJXJa\",\"button\":\"ActivitySelect_button__MGtKV\",\"span\":\"ActivitySelect_span__7A+LP\",\"spanDark\":\"ActivitySelect_spanDark__1dZ-l\",\"svg\":\"ActivitySelect_svg__pcQMQ\",\"svgDark\":\"ActivitySelect_svgDark__X0Qqq\",\"options\":\"ActivitySelect_options__5xKUK\",\"optionsDark\":\"ActivitySelect_optionsDark__iKtlE\",\"optionsViolet\":\"ActivitySelect_optionsViolet__RYtiF\",\"option\":\"ActivitySelect_option__foQgq\",\"optionDark\":\"ActivitySelect_optionDark__6zO1Y\",\"activeOption\":\"ActivitySelect_activeOption__E17G8\",\"activeOptionViolet\":\"ActivitySelect_activeOptionViolet__fyrVa\"};","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport { HiChevronDown, HiChevronUp } from \"react-icons/hi\";\r\nimport styles from \"./ActivitySelect.module.css\";\r\n\r\nconst activities = [\r\n  \"football\",\r\n  \"tennis\",\r\n  \"basketball\",\r\n  \"gym\",\r\n  \"fitness\",\r\n  \"cycling\",\r\n  \"running\",\r\n  \"jogging\",\r\n  \"swimming\",\r\n  \"hockey\",\r\n  \"rugby\",\r\n  \"volley\",\r\n  \"yoga\",\r\n  \"walking\",\r\n  \"dancing\",\r\n  \"skiing\",\r\n  \"snowboarding\",\r\n  \"surfing\",\r\n  \"boxing\",\r\n  \"climbing\",\r\n  \"other\",\r\n];\r\n\r\nexport default function ActivitySelect({ theme, value, onChange }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const dropdownRef = useRef(null);\r\n\r\n  const handleSelect = (selectedActivity) => {\r\n    onChange(selectedActivity);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  // închide dropdown dacă dai click în afară\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.selector} ref={dropdownRef}>\r\n      <button className={styles.button} onClick={() => setIsOpen((p) => !p)}>\r\n        <span\r\n          className={clsx(\r\n            styles.span,\r\n            theme === \"dark\" || theme === \"violet\"\r\n              ? styles.spanDark\r\n              : styles.span\r\n          )}\r\n        >\r\n          {value.charAt(0).toUpperCase() + value.slice(1)}\r\n        </span>\r\n        {!isOpen ? (\r\n          <HiChevronDown\r\n            className={clsx(\r\n              styles.svg,\r\n              theme === \"dark\" || theme === \"violet\"\r\n                ? styles.svgDark\r\n                : styles.svg\r\n            )}\r\n          />\r\n        ) : (\r\n          <HiChevronUp\r\n            className={clsx(\r\n              styles.svg,\r\n              theme === \"dark\" || theme === \"violet\"\r\n                ? styles.svgDark\r\n                : styles.svg\r\n            )}\r\n          />\r\n        )}\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <ul\r\n          className={clsx(\r\n            styles.options,\r\n            theme === \"dark\" ? styles.optionsDark : styles.options,\r\n            theme === \"violet\" ? styles.optionsViolet : styles.options\r\n          )}\r\n        >\r\n          {activities.map((option) => (\r\n            <li\r\n              key={option}\r\n              className={clsx(\r\n                styles.option,\r\n                theme === \"dark\" ? styles.optionDark : styles.option,\r\n                option === value &&\r\n                  (theme === \"violet\"\r\n                    ? styles.activeOptionViolet\r\n                    : styles.activeOption)\r\n              )}\r\n              onClick={() => handleSelect(option)}\r\n            >\r\n              {option.charAt(0).toUpperCase() + option.slice(1)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nActivitySelect.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  theme: PropTypes.string,\r\n};\r\n","import ActivitySelect from \"./ActivitySelect\";\r\n\r\nexport default ActivitySelect;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cont\":\"PsyhicalActivityPage_cont__Oc4KP\",\"leftSideCont\":\"PsyhicalActivityPage_leftSideCont__vg3OJ\",\"rightSideCont\":\"PsyhicalActivityPage_rightSideCont__7PUbJ\",\"rightSideUpCont\":\"PsyhicalActivityPage_rightSideUpCont__rWIB5\",\"title\":\"PsyhicalActivityPage_title__qaReE\",\"graphCont\":\"PsyhicalActivityPage_graphCont__hS0ay\",\"rightSideContTitle\":\"PsyhicalActivityPage_rightSideContTitle__JK8yC\",\"rightSideDate\":\"PsyhicalActivityPage_rightSideDate__7ixke\",\"dateWrapper\":\"PsyhicalActivityPage_dateWrapper__nXnVE\",\"paramInput\":\"PsyhicalActivityPage_paramInput__vm+WE\",\"fromToCont\":\"PsyhicalActivityPage_fromToCont__JvVBy\",\"fromToTitle\":\"PsyhicalActivityPage_fromToTitle__69cha\",\"fromExercise\":\"PsyhicalActivityPage_fromExercise__JR7uE\",\"from\":\"PsyhicalActivityPage_from__6IVXs\",\"rem\":\"PsyhicalActivityPage_rem__mNhgR\",\"lineRowCont\":\"PsyhicalActivityPage_lineRowCont__mGJRg\",\"lineRow\":\"PsyhicalActivityPage_lineRow__BqSIv\",\"activitySelect\":\"PsyhicalActivityPage_activitySelect__8JrJo\",\"minutes\":\"PsyhicalActivityPage_minutes__ZLhqE\",\"minMax\":\"PsyhicalActivityPage_minMax__CdcCB\",\"timeInput\":\"PsyhicalActivityPage_timeInput__IdllZ\",\"removeBtn\":\"PsyhicalActivityPage_removeBtn__Z48tD\",\"dash\":\"PsyhicalActivityPage_dash__o8Isq\",\"twoDots\":\"PsyhicalActivityPage_twoDots__f2RJM\",\"ampmSelect\":\"PsyhicalActivityPage_ampmSelect__iYcoj\",\"addSleepCont\":\"PsyhicalActivityPage_addSleepCont__Ky0ff\",\"addBtn\":\"PsyhicalActivityPage_addBtn__AR7C8\",\"saveBtn\":\"PsyhicalActivityPage_saveBtn__56ccd\",\"adviceCont\":\"PsyhicalActivityPage_adviceCont__FR2Xu\",\"navBtn\":\"PsyhicalActivityPage_navBtn__IA6Cu\"};","import PsyhicalActivityPage from \"./PsyhicalActivityPage\";\r\n\r\nexport default PsyhicalActivityPage;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { usePrivate } from \"../../hooks/usePrivate\";\r\nimport { setTotalStepsForToday } from \"../../redux/private/privateSlice\";\r\nimport { setTotalSteps } from \"../../redux/private/operationsPrivate\";\r\n\r\nimport convertActivityToSteps from \"../../Utils/convertActivityToSteps\";\r\nimport calculateMinimumDailyActivity from \"../../Utils/calculateMinimumDailyActivity\";\r\nimport formatDate from \"../../Utils/formatDate\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport ActivitySelect from \"../../components/ActivitySelect\";\r\n\r\nimport styles from \"./PsyhicalActivityPage.module.css\";\r\nimport getRegistrationsForAWeek from \"../../Utils/getRegistrationsForAWeek\";\r\nimport calculateDailySteps from \"../../Utils/calculateDailySteps\";\r\nimport WeeklyChart from \"../../components/WeeklyChart\";\r\n\r\nexport default function PsyhicalActivityPage() {\r\n  const navigate = useNavigate();\r\n\r\n  const { user, privateDispatch } = usePrivate();\r\n  // console.log(\"user psyhical :\", user);\r\n\r\n  const age = user?.age ?? 0;\r\n  const height = user?.height ?? 0;\r\n  const weight = user?.weight ?? 0;\r\n  const desiredWeight = user?.desiredWeight ?? 0;\r\n\r\n  const steps = useMemo(() => user?.steps || [], [user?.steps]);\r\n\r\n  const minDailyActivitySteps = calculateMinimumDailyActivity(\r\n    age,\r\n    height,\r\n    weight,\r\n    desiredWeight\r\n  );\r\n\r\n  const [filterDate, setFilterDate] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n  // console.log(\"filterDate :\", filterDate);\r\n\r\n  const now = useMemo(() => new Date(), []);\r\n  const today = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(\r\n    2,\r\n    \"0\"\r\n  )}-${String(now.getDate()).padStart(2, \"0\")}`;\r\n\r\n  const isTodaycondition = filterDate === today;\r\n  // console.log(\"isTodaycondition :\", isTodaycondition);\r\n\r\n  const lines = useMemo(\r\n    () =>\r\n      steps.length > 0\r\n        ? [...steps]\r\n        : [\r\n            {\r\n              date: now,\r\n              interval: [\r\n                {\r\n                  exerciseType: \"walking\",\r\n                  minutes: \"00\",\r\n                  intensity: \"min\",\r\n                  steps: 0,\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n    [steps, now]\r\n  );\r\n\r\n  const filteredSteps = steps.find(\r\n    (step) => new Date(step.date).toISOString().split(\"T\")[0] === filterDate\r\n  );\r\n\r\n  const [interval, setInterval] = useState([\r\n    {\r\n      date: now,\r\n      interval: [\r\n        {\r\n          exerciseType: \"walking\",\r\n          minutes: \"00\",\r\n          intensity: \"min\",\r\n          steps: 0,\r\n        },\r\n      ],\r\n    },\r\n  ]);\r\n  // console.log(\"interval :\", interval);\r\n\r\n  useEffect(() => {\r\n    if (filteredSteps) {\r\n      const sortedIntervals = [...filteredSteps.interval];\r\n      setInterval(sortedIntervals);\r\n    }\r\n  }, [filteredSteps]);\r\n\r\n  useEffect(() => {\r\n    const dayExercises = lines.find(\r\n      (line) => new Date(line.date).toISOString().split(\"T\")[0] === filterDate\r\n    );\r\n\r\n    if (dayExercises) {\r\n      const sortedIntervals = [...dayExercises.interval];\r\n      setInterval(sortedIntervals);\r\n    } else {\r\n      setInterval([\r\n        {\r\n          exerciseType: \"walking\",\r\n          minutes: \"00\",\r\n          intensity: \"min\",\r\n          steps: 0,\r\n        },\r\n      ]);\r\n    }\r\n  }, [filterDate, lines, now, steps]);\r\n\r\n  const totalSteps = interval.reduce((acc, int) => {\r\n    const stepsVal = Number(int.steps) || 0;\r\n    return acc + stepsVal;\r\n  }, 0);\r\n\r\n  // console.log(\"totalSteps :\", totalSteps);\r\n\r\n  useEffect(() => {\r\n    privateDispatch(setTotalStepsForToday(totalSteps));\r\n  }, [privateDispatch, totalSteps]);\r\n\r\n  const lastInterval = interval[interval.length - 1];\r\n\r\n  const emptyLineCondition = (line) =>\r\n    Number(String(line.minutes).trim()) === 0;\r\n\r\n  const emptyLastIntervalLineCondition = emptyLineCondition(lastInterval);\r\n\r\n  const updateFilteredLineInterval = (intervalIdx, field, value) => {\r\n    const newInterval = interval.map((int, idx) =>\r\n      idx === intervalIdx\r\n        ? {\r\n            ...int,\r\n            [field]: value,\r\n            steps: convertActivityToSteps(\r\n              field === \"exerciseType\" ? value : int.exerciseType,\r\n              field === \"minutes\"\r\n                ? Math.max(0, parseInt(value, 10) || 0)\r\n                : parseInt(int.minutes, 10) || 0,\r\n              age,\r\n              weight,\r\n              height,\r\n              field === \"intensity\" ? value : int.intensity\r\n            ),\r\n          }\r\n        : { ...int }\r\n    );\r\n\r\n    setInterval(newInterval);\r\n  };\r\n\r\n  const addFilteredLineNewInterval = () => {\r\n    const newInterval = [...interval] || [];\r\n    newInterval.push({\r\n      exerciseType: \"walking\",\r\n      minutes: \"00\",\r\n      intensity: \"min\",\r\n      steps: 0,\r\n    });\r\n    setInterval(newInterval);\r\n  };\r\n\r\n  const removeFilteredLineInterval = (index) => {\r\n    const newInterval = interval.filter((_, i) => i !== index);\r\n    setInterval(newInterval);\r\n  };\r\n\r\n  const resetFilteredLinesInterval = () => {\r\n    setInterval([\r\n      {\r\n        exerciseType: \"walking\",\r\n        date: filterDate,\r\n        minutes: \"00\",\r\n        intensity: \"min\",\r\n        steps: 0,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const formatNumber = (num) => String(num).replace(/^0+(?=\\d)/, \"\");\r\n\r\n  function handleSave() {\r\n    const lastIntervalIndex = interval.length - 1;\r\n    const intervalToSave = emptyLastIntervalLineCondition\r\n      ? interval.filter((_, index) => index !== lastIntervalIndex)\r\n      : [...interval];\r\n\r\n    // console.log(\"intervalToSave :\", intervalToSave);\r\n\r\n    privateDispatch(\r\n      setTotalSteps({ date: filterDate, interval: intervalToSave })\r\n    );\r\n  }\r\n\r\n  const weeklySteps = getRegistrationsForAWeek(steps, \"steps\");\r\n  const neededSteps = calculateDailySteps(age, weight, desiredWeight, height);\r\n\r\n  return (\r\n    <div className={styles.cont}>\r\n      <div className={styles.leftSideCont}>\r\n        <div className={styles.rightSideUpCont}>\r\n          <h1 className={styles.title}>Physical Activity</h1>\r\n          <div className={styles.graphCont}>\r\n            {\" \"}\r\n            <WeeklyChart\r\n              target={neededSteps}\r\n              weeklyData={weeklySteps}\r\n              type={\"steps\"}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className={styles.adviceCont}>\r\n          <h2 className={styles.adviceTitle}>Steps Equivalent of Exercises </h2>\r\n          {totalSteps !== 0 ? (\r\n            <p\r\n              style={{\r\n                fontSize: \"clamp(11px, 1.5vw, 12px)\",\r\n                color: totalSteps < totalSteps * 0.6 ? \"red\" : undefined,\r\n              }}\r\n              className={styles.advicep}\r\n            >\r\n              <span style={{ marginRight: \"2px\" }}>\r\n                Total Steps for{\" \"}\r\n                {isTodaycondition ? \"today\" : formatDate(filterDate)}:{\" \"}\r\n              </span>{\" \"}\r\n              <span>{totalSteps} steps</span>\r\n            </p>\r\n          ) : (\r\n            <p style={{ color: \"red\" }} className={styles.advicep}>\r\n              No Physical Activities records for{\" \"}\r\n              {isTodaycondition ? \"today\" : formatDate(filterDate)}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.rightSideCont}>\r\n        <div className={styles.rightSideUpCont}>\r\n          <h1 className={styles.title}>Add exercise activities</h1>\r\n          {/* data */}\r\n          <div className={styles.rightSideDate}>\r\n            <div className={styles.dateWrapper}>\r\n              <input\r\n                max={today}\r\n                type=\"date\"\r\n                value={filterDate ?? today}\r\n                onChange={(e) => setFilterDate(e.target.value)}\r\n                className={styles.paramInput}\r\n              />\r\n            </div>\r\n            <p className={styles.rightSideDateP}>Choose date</p>\r\n          </div>\r\n          <div className={styles.fromToCont}>\r\n            <div className={styles.fromToTitle}>\r\n              <p className={styles.fromExercise}>Exercise Type</p>\r\n              <p className={styles.from}>Minutes</p>\r\n              <p className={styles.from}>Intensity</p>\r\n              <p className={styles.rem}>\r\n                {interval.length > 1 ? \"Delete\" : \"Reset\"}\r\n              </p>\r\n            </div>\r\n            <div className={styles.lineRowCont}>\r\n              {interval.map((line, idx) => (\r\n                <div key={`physical-${idx}`} className={styles.lineRow}>\r\n                  <ActivitySelect\r\n                    value={line?.exerciseType ?? \"walking\"}\r\n                    onChange={(val) =>\r\n                      updateFilteredLineInterval(idx, \"exerciseType\", val)\r\n                    }\r\n                    theme=\"light\"\r\n                  />\r\n                  <div className={styles.minutes}>\r\n                    <input\r\n                      type=\"number\"\r\n                      min=\"0\"\r\n                      step=\"1\"\r\n                      value={formatNumber(line?.minutes)}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"minutes\",\r\n                          e.target.value.replace(/^0+(?=\\d)/, \"\") || \"0\" // eliminăm 0 la început\r\n                        )\r\n                      }\r\n                      className={clsx(styles.timeInput)}\r\n                    />\r\n                  </div>\r\n                  <div className={styles.minMax}>\r\n                    <select\r\n                      style={\r\n                        line?.intensity === \"min\"\r\n                          ? { color: \"green\", fontWeight: \"bold\" }\r\n                          : { color: \"var(--brand-color)\", fontWeight: \"bold\" }\r\n                      }\r\n                      value={line?.intensity}\r\n                      onChange={(e) =>\r\n                        updateFilteredLineInterval(\r\n                          idx,\r\n                          \"intensity\",\r\n                          e.target.value\r\n                        )\r\n                      }\r\n                      className={styles.ampmSelect}\r\n                    >\r\n                      <option\r\n                        style={{ color: \"green\", fontWeight: \"bold\" }}\r\n                        value=\"min\"\r\n                      >\r\n                        Min\r\n                      </option>\r\n                      <option\r\n                        style={{\r\n                          color: \"var(--brand-color)\",\r\n                          fontWeight: \"bold\",\r\n                        }}\r\n                        value=\"max\"\r\n                      >\r\n                        Max\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n                  {/* buton remove */}\r\n                  {interval.length > 1 ? (\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => removeFilteredLineInterval(idx)}\r\n                      className={styles.removeBtn}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  ) : (\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => resetFilteredLinesInterval()}\r\n                      className={styles.removeBtn}\r\n                    >\r\n                      ✕\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          {/* add line */}\r\n          <div className={styles.addSleepCont}>\r\n            <p>Add exercise</p>\r\n            <button\r\n              onClick={() => {\r\n                !emptyLastIntervalLineCondition && addFilteredLineNewInterval();\r\n              }}\r\n              type=\"button\"\r\n              className={styles.addBtn}\r\n            >\r\n              Add +\r\n            </button>\r\n            {((interval.length === 1 && !emptyLastIntervalLineCondition) ||\r\n              interval.length > 1) && (\r\n              <button\r\n                onClick={handleSave}\r\n                type=\"button\"\r\n                className={styles.saveBtn}\r\n              >\r\n                Save\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.adviceCont}>\r\n          <h2 className={styles.adviceTitle}>Suggestions</h2>\r\n          {minDailyActivitySteps !== 0 ? (\r\n            <p className={styles.advicep}>\r\n              Try to get at least {minDailyActivitySteps} minutes of activity\r\n              everyday.\r\n            </p>\r\n          ) : (\r\n            <p\r\n              style={{\r\n                color: \"red\",\r\n                background: \"var(--Gray5)\",\r\n                textAlign: \"left\",\r\n                flexWrap: \"wrap\",\r\n                gap: \"3px\",\r\n                justifyContent: \"flex-start\",\r\n                height: \"fit-content\",\r\n              }}\r\n              className={styles.advicep}\r\n            >\r\n              Personal info missing. Please click\r\n              <button\r\n                className={styles.navBtn}\r\n                onClick={() => navigate(\"/\")}\r\n                type=\"button\"\r\n              >\r\n                Diet Calculator\r\n              </button>{\" \"}\r\n              to update !\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/**\r\n * Calculeaza activitatea fizica minima zilnica in minute\r\n * pentru mentinerea sanatatii si atingerea obiectivului.\r\n *\r\n * @param {number} age - varsta utilizatorului (ani)\r\n * @param {number} height - inaltimea utilizatorului (cm)\r\n * @param {number} weight - greutatea actuala (kg)\r\n * @param {number} desiredWeight - greutatea dorita (kg)\r\n * @returns {number} activitate minima zilnica in minute\r\n */\r\nexport default function calculateMinimumDailyActivity(\r\n  age,\r\n  height,\r\n  weight,\r\n  desiredWeight\r\n) {\r\n  if (!age || !height || !weight || !desiredWeight) return 0;\r\n\r\n  const heightM = height / 100;\r\n  const bmiCurrent = weight / (heightM * heightM);\r\n  const bmiDesired = desiredWeight / (heightM * heightM);\r\n\r\n  // Activitate de baza pentru sanatate\r\n  let baseActivity = 30; // 30 min/zi minim\r\n\r\n  // Ajustare dupa varsta\r\n  if (age < 30) baseActivity *= 1;\r\n  else if (age < 50) baseActivity *= 1.1;\r\n  else baseActivity *= 1.2;\r\n\r\n  // Ajustare dupa obiectiv si diferenta BMI\r\n  const bmiDiff = bmiCurrent - bmiDesired;\r\n\r\n  let goalFactor = 1; // mentinere\r\n  if (bmiDiff > 0.5) {\r\n    // trebuie sa slabeasca\r\n    goalFactor = 1 + Math.min(bmiDiff / 5, 1); // creste activitatea pana la 100% in functie de diferenta\r\n  } else if (bmiDiff < -0.5) {\r\n    // trebuie sa se ingrase\r\n    goalFactor = 0.8; // mai putina activitate\r\n  }\r\n\r\n  const dailyActivityMinutes = baseActivity * goalFactor;\r\n\r\n  return Math.round(dailyActivityMinutes);\r\n}\r\n\r\n// Exemple\r\n// console.log(calculateMinimumDailyActivity(25, 175, 70, 65)); // slabire\r\n// console.log(calculateMinimumDailyActivity(35, 180, 80, 80)); // mentinere\r\n// console.log(calculateMinimumDailyActivity(50, 165, 60, 65)); // ingrasare\r\n// console.log(calculateMinimumDailyActivity(null, 165, 60, 65)); // lipseste age => 0\r\n","// extracted by mini-css-extract-plugin\nexport default {\"barChart\":\"WeeklyChart_barChart__dFSjt\"};","import WeeklyChart from \"./WeeklyChart\";\r\n\r\nexport default WeeklyChart;\r\n","import React from \"react\";\r\nimport {\r\n  ResponsiveContainer,\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  CartesianGrid,\r\n  Cell,\r\n} from \"recharts\";\r\n\r\nimport styles from \"./WeeklyChart.module.css\";\r\n\r\nexport default function WeeklyChart({ weeklyData, type, target }) {\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\" }}>\r\n      <ResponsiveContainer width=\"100%\">\r\n        <BarChart\r\n          data={weeklyData}\r\n          margin={{\r\n            top: 15,\r\n            right: 15,\r\n            left: type === \"steps\" ? -10 : -25,\r\n            bottom: 5,\r\n          }}\r\n          className={styles.barChart}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"day\" />\r\n          <YAxis />\r\n          <Tooltip\r\n            contentStyle={{ color: \"var(--brand-color)\", fontWeight: \"700\" }}\r\n          />\r\n          <Bar\r\n            dataKey={type === \"sleep\" ? \"Total hours\" : \"Total steps\"}\r\n            radius={[6, 6, 0, 0]}\r\n          >\r\n            {weeklyData.map((entry, index) => {\r\n              const value =\r\n                type === \"sleep\" ? entry[\"Total hours\"] : entry[\"Total steps\"];\r\n\r\n              const fillColor =\r\n                (type === \"sleep\" &&\r\n                  (value < target * 0.6 || value > target + 1)) ||\r\n                (type === \"steps\" && value < target * 0.6)\r\n                  ? \"red\"\r\n                  : type === \"steps\" &&\r\n                    value >= target * 0.6 &&\r\n                    value <= target * 0.8\r\n                  ? \"var(--brand-color)\"\r\n                  : \"#4cafef\";\r\n              return <Cell key={`cell-${index}`} fill={fillColor} />;\r\n            })}\r\n          </Bar>\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["calculateIntervalSleeptHours","fromHour","fromMinute","fromAmPm","toHour","toMinute","toAmPm","fH","Number","String","trim","fM","tH","tM","fAP","toUpperCase","tAP","some","isNaN","fromH24","toH24","minutesSlept","parseFloat","toFixed","getRegistrationsForAWeek","userData","param","date","Date","day","getDay","diffToMonday","startOfTheWeek","setDate","getDate","setHours","weekTotal","index","currentDay","dayData","find","toDateString","totalSteps","interval","reduce","acc","int","steps","push","toLocaleDateString","weekday","_dayData$interval","totalSleptHours","tillHour","tillMinute","tillAmPm","calculateDailySteps","age","currentWeight","desiredWeight","height","ageFactor","adjustment","baseSteps","weightDiff","Math","abs","dailySteps","round","formatDate","inputDate","year","month","split","map","dayName","monthName","concat","padStart","convertActivityToSteps","activity","minutes","weight","intensity","minutesNum","caloriesPerMin","football","tennis","basketball","gym","fitness","cycling","running","jogging","swimming","hockey","rugby","volley","yoga","walking","dancing","skiing","snowboarding","surfing","boxing","climbing","toLowerCase","adjustedCalories","activities","_ref","theme","value","onChange","isOpen","setIsOpen","useState","dropdownRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","_jsxs","className","styles","ref","children","onClick","p","_jsx","clsx","charAt","slice","HiChevronUp","HiChevronDown","option","_user$age","_user$height","_user$weight","_user$desiredWeight","navigate","useNavigate","user","privateDispatch","usePrivate","useMemo","minDailyActivitySteps","heightM","baseActivity","bmiDiff","goalFactor","min","dailyActivityMinutes","calculateMinimumDailyActivity","filterDate","setFilterDate","toISOString","now","today","getFullYear","getMonth","isTodaycondition","lines","length","exerciseType","filteredSteps","step","setInterval","sortedIntervals","dayExercises","line","setTotalStepsForToday","lastInterval","emptyLastIntervalLineCondition","updateFilteredLineInterval","intervalIdx","field","newInterval","idx","_objectSpread","max","parseInt","weeklySteps","neededSteps","cont","leftSideCont","rightSideUpCont","title","graphCont","WeeklyChart","weeklyData","type","adviceCont","adviceTitle","style","fontSize","color","undefined","advicep","marginRight","rightSideCont","rightSideDate","dateWrapper","e","paramInput","rightSideDateP","fromToCont","fromToTitle","fromExercise","from","rem","lineRowCont","_line$exerciseType","num","lineRow","ActivitySelect","val","replace","timeInput","minMax","fontWeight","ampmSelect","filter","_","i","removeFilteredLineInterval","removeBtn","addSleepCont","addFilteredLineNewInterval","addBtn","lastIntervalIndex","intervalToSave","setTotalSteps","saveBtn","background","textAlign","flexWrap","gap","justifyContent","navBtn","width","ResponsiveContainer","BarChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","contentStyle","Bar","radius","entry","fillColor","Cell","fill"],"sourceRoot":""}